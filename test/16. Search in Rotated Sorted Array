<!--
    假设按照升序排序的数组在预先未知的某个点上进行了旋转。

    ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

    搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

    你可以假设数组中不存在重复的元素。

    你的算法时间复杂度必须是 O(log n), 级别。
-->

<!-- 
    思路: 
        时间复杂度O(log n),二分法.
        但旋转后的数组不是有序的.可以先找到数组的中间数与target比较,
            若中间数大于最后边的数,则左边的有序,
            若中间数小于最左边的数,则右边的有序,
            接着就可以在有序的数组中进行二分法查找
-->

/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function(nums, target) {
    let left =  0
    let right = nums.length - 1
    while (left <= right) {
      let middle = Math.floor((right + left) / 2)

      if (nums[middle] === target) {
        return middle
      } else if (nums[middle] > nums[right]) {  //中间数大于最右边的数  左边的有序
        if (nums[middle] > target && target >= nums[left]) {
          right = middle - 1
        } else {
          left = middle + 1
        }
      } else {  小于最左边的数 右边有序
        if (nums[middle] < target && target <= nums[right]) {
          left = middle + 1
        } else {
          right = middle - 1
        }
      }
    }
    return -1
};
